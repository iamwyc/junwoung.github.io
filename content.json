{"meta":{"title":"Jun woung blog","subtitle":"儒生脱尘，不为贪逸淫乐之事；谦谦君子不饮盗泉之水。","description":"懒懒的我，丑丑的你","author":"Jun Woung","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"javascript 常用方法（一）","date":"2018-08-13T10:39:35.640Z","updated":"2018-08-13T10:39:25.460Z","comments":true,"path":"2018/08/13/javascript 常用方法（一）/","link":"","permalink":"http://yoursite.com/2018/08/13/javascript 常用方法（一）/","excerpt":"javascript 常用方法（一）标签（空格分隔）： 原生js 闭包 tips：在项目中，我们经常遇到一些方法，原生js并没有提供现成的相关的方法，因此我们只能自己定义自己要用到的方法，并将其挂在到全局作用域的变量上，这样在函数解释执行过后，在项目中的任何位置都可以调用封装好的方法。本次主要封装了：获取url链接参数、获取格式化时间、localstorage的相关操作","text":"javascript 常用方法（一）标签（空格分隔）： 原生js 闭包 tips：在项目中，我们经常遇到一些方法，原生js并没有提供现成的相关的方法，因此我们只能自己定义自己要用到的方法，并将其挂在到全局作用域的变量上，这样在函数解释执行过后，在项目中的任何位置都可以调用封装好的方法。本次主要封装了：获取url链接参数、获取格式化时间、localstorage的相关操作 --- ## 1 获取url参数方法 `tips：`网上有用正则表达式写的函数，我是用解析url链接参数方式获取个参数 ### 1.1 函数代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859function getUrlParam()&#123; /** git Test hhh 哦呵呵呵 branch master-dev tijiao-issue101 1、判断url参数个数，为空则直接返回空； 2、判断传入的参数是否为空， 为空：判断url参数个数，个数为1，则返回参数值；个数不为1，则返回空； 不为空：判断url参数个数， 个数为1，且对应参数无参数名只有参数值，则直接返回参数值；如果对应参数包含参数名则比对参数名，一致则返回参数值，否则返回空 个数不为1，则遍历参数数组，寻找与参数名对应的参数值，找到则返回相应的参数值，否则返回空 */ let str = &apos;&apos;; let url = location.href; let param_str = url.split(&apos;?&apos;)[1]; if(!param_str)return; let key_value = param_str.split(&apos;&amp;&apos;); let arg = arguments; if(!arg || arg.length === 0)&#123; if(key_value.length === 1)&#123; if(key_value[0].indexOf(&apos;=&apos;) === -1)&#123; return key_value[0]; &#125; else&#123; return key_value[0].split(&apos;=&apos;)[1]; &#125; &#125; return; &#125; else&#123; str =arguments[0].toString(); &#125; if(!key_value || key_value.length &lt;= 0)return; else&#123; if(key_value.length == 1)&#123; if(key_value[0].indexOf(&apos;=&apos;) === -1)&#123; return key_value[0]; &#125; else if(key_value[0].split(&apos;=&apos;).length == 2)&#123; if(key_value[0].split(&apos;=&apos;)[0] == str)&#123; return key_value[0].split(&apos;=&apos;)[1]; &#125; else&#123; return; &#125; &#125; &#125; else&#123; for(let i = 0; i &lt; key_value.length; i++)&#123; let param = key_value[i].split(&apos;=&apos;); if(param[0] == str)&#123; return param[1]; &#125; &#125; return; &#125; &#125; &#125; 1.2 函数调用12getUrlParam() //当url链接参数只有一个的时候，可以不指定参数名，直接返回参数值getUrlParam（str） //返回指定参数名对应的参数值，没有则返回空值 2 获取格式化时间2.1 函数代码1234567891011121314151617181920212223242526272829303132333435363738394041424344function getFormatDate()&#123; /* 1、参数1代表传进来的日期格式，可以是日期对象，也可以是日期的value数值 2、参数2代表最终返回结果，year、month、day、hour、minute、second 分表表示精确到对应位，week表示输出星期几 3、参数1不传表示默认当前日期；参数2不传默认输出精确到秒 */ let arg = arguments[0]; let str = arguments[1]; let date = null; let weeks = [&apos;星期日&apos;,&apos;星期一&apos;,&apos;星期二&apos;,&apos;星期三&apos;,&apos;星期四&apos;,&apos;星期五&apos;,&apos;星期六&apos;]; if(!arg)&#123; date = new Date(); &#125; else&#123; if(typeof arg === &apos;object&apos;)&#123; date = arg; &#125; else&#123; date = new Date(arg); &#125; &#125; let year = date.getFullYear(); let month = date.getMonth() + 1; let day = date.getDate(); let hour = date.getHours(); let minute = date.getMinutes(); let second = date.getSeconds(); let week = date.getDay(); month = month &gt; 9 ? month : (&apos;0&apos;+month); day = day &gt; 9 ? day : (&apos;0&apos;+day); hour = hour &gt; 9 ? hour : (&apos;0&apos;+hour); minute = minute &gt; 9 ? minute : (&apos;0&apos;+minute); second = second &gt; 9 ? second : (&apos;0&apos;+second); switch(str)&#123; case &apos;year&apos;: return year; case &apos;month&apos;: return year+&apos;-&apos;+month; case &apos;day&apos;: return year+&apos;-&apos;+month+&apos;-&apos;+day; case &apos;hour&apos;: return year+&apos;-&apos;+month+&apos;-&apos;+day+&apos; &apos;+hour; case &apos;minute&apos;: return year+&apos;-&apos;+month+&apos;-&apos;+day+&apos; &apos;+hour+&apos;:&apos;+minute; case &apos;second&apos;: return year+&apos;-&apos;+month+&apos;-&apos;+day+&apos; &apos;+hour+&apos;:&apos;+minute+&apos;:&apos;+second; case &apos;week&apos;: return weeks[week]; default: return year+&apos;-&apos;+month+&apos;-&apos;+day+&apos; &apos;+hour+&apos;:&apos;+minute+&apos;:&apos;+second; &#125; &#125; 2.2 函数调用123getFormatDate() //获取当前时间，精确到秒getFormatDate(arg) //arg可以为时间戳也可以为日期对象，返回指定日期的时间，精确到秒getFormatDate(arg1,arg2) //arg1时间参数，arg2返回的日期格式，具体看代码首部注释 3 localStorage方法再封装tips:H5自带的localstorage方法，相较于cookie，极大的简化了本地存储参数。但是，其本身对localstorage封装的方法过于简单，只提供了基本功能，因此在使用过程中还是有些许不便。 3.1 setLocal 方法tips:设置参数的同时，设置一个参数过期参数 3.1.1 函数代码1234567function setLocal(key,value,expire)&#123; let key_timestamp = key + &apos;TimeStamp&apos;; let now_timestamp = (new Date()).valueOf(); let time = expire ? (now_timestamp + expire*24*60*60*1000) : (now_timestamp + 24*60*60*1000); window.localStorage[key] = value; window.localStorage[key_timestamp] = time; &#125; 3.1.2 函数调用1setLocal(key,value,expire) //key参数名（必传），value参数值（必传），expire参数过期时间，不传则表示1天后过期 3.2 removeLocal 方法tips:删除参数的同时，删除对应的过期参数 3.2.1 函数代码1234function removeLocal(key)&#123; window.localStorage.removeItem(key); window.localStorage.removeItem(key+&apos;TimeStamp&apos;);&#125; 3.2.2 方法调用1removeLocal(key) //删除对应的参数及过期参数 3.3 getLocal 方法tips:获取对应的参数之前，比对对应的过期参数的时间戳与当前时间戳，如果过期则删除对应的参数以及过期参数，否则返回参数值 3.3.1 函数代码1234567891011function getLocal(key)&#123; let now_timestamp = (new Date()).valueOf(); let key_timestamp = window.localStorage[key+&apos;TimeStamp&apos;]; if(now_timestamp &gt; key_timestamp)&#123; removeLocal(key); return undefined; &#125; else&#123; return window.localStorage[key]; &#125;&#125; 3.3.2 函数调用1getLocal(key) //获取指定的参数值 4 将函数定义为全局tips:将封装好的参数添加到全局变量里面，再置于闭包里面12345678910111213141516171819202122232425(function()&#123; function getUrlParam()&#123; //... &#125; function getFormatDate()&#123; //... &#125; function setLocal(key,value,expire)&#123; //... &#125; function removeLocal(key)&#123; //... &#125; function getLocal(key)&#123; //... &#125; window.util = &#123; &apos;getUrlParam&apos;: getUrlParam, &apos;getFormatDate&apos;: getFormatDate, &apos;setLocal&apos;: setLocal, &apos;getLocal&apos;: getLocal, &apos;removeLocal&apos;: removeLocal &#125;; console.log(window.util); //输出对应变量&#125;)(); 4.1 调用将以上代码引入主页面，之后就可以通过window.util[str]或window.util.方式调用指定方法","categories":[],"tags":[]},{"title":"","slug":"IntelliJ IDEA 使用笔记","date":"2018-08-13T08:20:35.382Z","updated":"2018-08-13T08:20:28.986Z","comments":true,"path":"2018/08/13/IntelliJ IDEA 使用笔记/","link":"","permalink":"http://yoursite.com/2018/08/13/IntelliJ IDEA 使用笔记/","excerpt":"IntelliJ IDEA 使用笔记标签（空格分隔）： IDEA 项目启动 tips:工作中经常遇到新启项目，由于项目开发周期一般都会持续好几个月时间，而项目启动一般只在项目开始阶段进行，导致我经常会遗忘在项目启动的时候一些配置的注意事项。","text":"IntelliJ IDEA 使用笔记标签（空格分隔）： IDEA 项目启动 tips:工作中经常遇到新启项目，由于项目开发周期一般都会持续好几个月时间，而项目启动一般只在项目开始阶段进行，导致我经常会遗忘在项目启动的时候一些配置的注意事项。 1 从本地导入项目file -&gt; new -&gt; project from exsisting sources;找到项目对应的pom.xml 2 配置项目的configurations项目命名、deployment 3 配置mavenfile -&gt; settings -&gt; build,wxecution,deployment -&gt; build tools -&gt; maven 4 安装包file -&gt; settings -&gt; plugins 5 调出maven 工具栏view -&gt; tool windows -&gt; maven projects清除依赖：clean重新安装：install","categories":[],"tags":[]},{"title":"","slug":"vue select 选择插件","date":"2018-08-13T08:16:33.772Z","updated":"2018-08-13T08:16:30.172Z","comments":true,"path":"2018/08/13/vue select 选择插件/","link":"","permalink":"http://yoursite.com/2018/08/13/vue select 选择插件/","excerpt":"vue select 选择插件标签（空格分隔）： vue javascript 插件 tips:web开发经常要用到很多不同类型的选择控件，本次特地针对六种常见的控件进行封装，引用插件的时候记得标明引用的选择控件类型：select（下拉列表）、tab（选择块）、checkbox（复选框）、radio（单选按钮）、switch（开关按钮）、complete（自动补全），具体说明下面会交代详细。","text":"vue select 选择插件标签（空格分隔）： vue javascript 插件 tips:web开发经常要用到很多不同类型的选择控件，本次特地针对六种常见的控件进行封装，引用插件的时候记得标明引用的选择控件类型：select（下拉列表）、tab（选择块）、checkbox（复选框）、radio（单选按钮）、switch（开关按钮）、complete（自动补全），具体说明下面会交代详细。 1 插件部分tips:以下为了方便阅读，会将个插件的template、script、css部分拆开来呈现，实际上它们都在一个完整的文件里面，且都是紧密衔接的。1.1 公共部分template部分12345&lt;template&gt; &lt;div v-if=&apos;data &amp;&amp; data.length || type == &quot;switch&quot;&apos; style=&quot;float:left;&quot;&gt; &lt;!-- 差异化部分 --&gt; &lt;/div&gt;&lt;/template&gt; data部分1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556data()&#123; return&#123; type: &apos;select&apos;, multiple: false, selected: null, data: null,//传入的数据 query: false,//select 是否带query查询 data_select: null,//select 复制传入的数据 //checkbox 用于复制传入已选的数据 txt: null,//select 存放选中的文本 hover_idx: null,//tab 用于展示取消按钮 //checkbox 用于改变复选框样式 //radio 用于改变单选按钮样式 show_little: true,//tab 用于展示tab选项多少 hover_idx_sel: null,//tab 用于取消已选按钮 disable: false,// checkbox 用于确认是否不可选 compValue: null,//complete 用于存放选中的文本信息 focus: false,//complete 用于存放文本框状态 i: null,//complete 用于模拟hover事件 &#125; &#125;, props:&#123; select: &#123; type: Object, default: null &#125; &#125;, beforeMount()&#123; /* 在节点创建之前将传入的参数赋值给相应的变量 */ if(this.select.data &amp;&amp; this.select.data.length)&#123; for(let key in this.select)&#123; this.$data[key] = this.select[key]; &#125; /* 用于query 保存传入的初始值 */ this.data_select = JSON.parse(JSON.stringify(this.data)); if(this.type == &apos;checkbox&apos;)&#123; /* 用于checkbox 当disable为part时，用于确定已选的参数不可被取消 */ this.data_select = JSON.parse(JSON.stringify(this.selected)); &#125; &#125; if(this.selected !== null)&#123; /* 初始化select选中的文本 */ for(let i = 0; i &lt; this.data.length; i++)&#123; if(this.selected == this.data[i].id)&#123; this.txt = this.data[i].name; break; &#125; &#125; &#125; if(this.select.type == &apos;switch&apos;)&#123; for(let key in this.select)&#123; this.$data[key] = this.select[key]; &#125; &#125; &#125; 1.2 select下拉列表template部分12345678910111213&lt;div v-if=&apos;type == &quot;select&quot;&apos; style=&quot;float:left;&quot;&gt; &lt;div class=&quot;clearfix j_div_select&quot;&gt; &lt;input type=&quot;text&quot; @blur=&quot;hide_options&quot; @focus=&quot;show_options&quot; style=&quot;width:0;height:0;outline:none;opacity:0;border:none;padding:0;marging:0;&quot;&gt; &lt;span class=&quot;j_sp_select&quot; :class=&quot;&#123;&apos;j_sp_select_dis&apos;:disable&#125;&quot; @click=&quot;get_focus&quot;&gt; &lt;i class=&quot;j_i_dropdown&quot;&gt;&lt;/i&gt; &lt;span class=&quot;j_lb_selected&quot; @click=&quot;get_focus2&quot; v-if=&quot;selected !== null&quot; :title=&quot;txt&quot;&gt;&#123;&#123;txt&#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;ul class=&quot;j_ul_options hide&quot;&gt; &lt;input v-if=&apos;query&apos; placeholder=&quot;请输入过滤条件&quot; type=&quot;text&quot; class=&quot;j_ip_query&quot; @focus=&apos;show_options2&apos; @blur=&apos;hide_options2&apos; @keyup=&quot;select_query&quot;&gt; &lt;li v-for=&quot;(option,key) in data_select&quot; :class=&quot;&#123;&apos;j_li_selected&apos;: selected == option.id&#125;&quot; :title=&quot;option.name&quot; @click=&quot;select_option(option)&quot;&gt;&lt;span class=&quot;j_sp_option&quot;&gt;&#123;&#123;option.name&#125;&#125;&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; script methods部分1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950 get_focus: function()&#123; /** 让select第一个文本框获取焦点 */ event.target.parentNode.firstChild.focus();&#125;,get_focus2: function()&#123; /** 让select query文本框获取焦点 */ event.target.parentNode.parentNode.firstChild.focus();&#125;,select_option: function(obj)&#123; /** 点击select选项触发 */ if(this.disable)return; this.selected = obj.id; this.txt = obj.name; this.$emit(&apos;callback&apos;,this.selected);&#125;,show_options: function()&#123; /** 当select第一个文本框获取焦点时展示下拉列表选项 */ event.target.parentNode.lastChild.setAttribute(&apos;class&apos;,&apos;j_ul_options&apos;);&#125;,show_options2: function()&#123; /** 当select query文本框获取焦点时展示下拉列表选项 */ let e = event; setTimeout(function()&#123; e.target.parentNode.parentNode.lastChild.setAttribute(&apos;class&apos;,&apos;j_ul_options&apos;); &#125;,150);&#125;,hide_options: function()&#123; /* 当select第一个文本框失去焦点时隐藏下拉列表选项 */ let e = event; setTimeout(function()&#123; e.target.parentNode.lastChild.setAttribute(&apos;class&apos;,&apos;j_ul_options hide&apos;); &#125;,150);&#125;,hide_options2: function()&#123; /* 当select query文本框失去焦点时隐藏下拉列表选项 */ let e = event; setTimeout(function()&#123; e.target.parentNode.parentNode.lastChild.setAttribute(&apos;class&apos;,&apos;j_ul_options hide&apos;); &#125;,150);&#125;,select_query: function()&#123; /* select下拉列表选项根据query文本框输入的值变化 */ let str = event.target.value; this.data_select = []; for(let i = 0; i &lt; this.data.length; i++)&#123; if(this.data[i].name.indexOf(str) !== -1)&#123; this.data_select.push(this.data[i]); &#125; &#125;&#125;, css部分1234567891011121314*&#123;font-size:14px;font-family:&apos;微软雅黑&apos;;&#125; .hide&#123;display:none;&#125; .j_div_select&#123;position:relative;max-width:200px;min-width:150px;height:28px;padding:0;color:#333;&#125; .j_div_select .j_sp_select&#123;width:90%;height:98%;line-height:28px;border:1px solid #dddddd;display:inline-block;border-radius:2px;cursor:pointer;position:relative;text-align:left;padding-left:4%;float:left;&#125; .j_div_select .j_sp_select_dis&#123;background-color:#f5f5f5!important;color:#bbb;cursor:not-allowed;&#125; .j_div_select .j_i_dropdown&#123;background:url(./img/select-triangle_down.png) no-repeat;display:inline-block;width:10px;height:6px;position:absolute;right:3%;top:45%;&#125; .j_div_select .j_ul_options&#123;position:absolute;padding:0;text-align:left;left:0;width:94%;background-color:#fff;z-index:100;border:1px solid #dddddd;margin:0;top:28px;overflow:auto;max-height:150px;&#125; .j_div_select .j_ul_options li&#123;list-style:none;margin:0;width:100%;height:25px;line-height:25px;cursor:pointer;&#125; .j_div_select .j_ul_options li:hover&#123;background-color:#F5F5F5;&#125; .j_div_select .j_li_selected&#123;background-color:#dddddd!important;color:#fff;&#125; .j_div_select .j_sp_option&#123;margin-left:4%;max-width:80%;display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;&#125; .j_div_select .j_lb_selected&#123;display:inline-block;max-width:75%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;&#125; .j_div_select .j_ip_query&#123;width:92%;padding-left:4%;border:1px solid #3896fe;margin:2px;outline:none;height:25px;color:#999;font-size:12px;&#125; 1.3 tab选择块template部分1234567891011121314151617181920212223242526&lt;div v-if=&apos;type == &quot;tab&quot;&apos;&gt; &lt;div class=&quot;clearfix j_div_tab&quot;&gt; &lt;ul class=&quot;j_ul_tab clearfix&quot; :class=&quot;&#123;&apos;j_ul_show_little&apos;:show_little&#125;&quot;&gt; &lt;li v-if=&quot;multiple&quot; :class=&quot;&#123;&apos;selected&apos;:selected == &apos;all&apos;&#125;&quot; @click=&quot;select_all&quot;&gt;全选&lt;/li&gt; &lt;li v-if=&quot;multiple&quot; style=&quot;background-color:#bbb;color:#fff;border:1px solid #bbb;&quot; @click=&quot;select_reverse&quot;&gt;反选&lt;/li&gt; &lt;li @click=&quot;select_tab(option)&quot; @mouseover=&quot;hover_idx = option.id&quot; @mouseout=&quot;hover_idx = null&quot; v-for=&quot;option in data&quot; :class=&quot;&#123;&apos;selected&apos;:selected.indexOf(option.id) !== -1&#125;&quot;&gt; &#123;&#123;option.name&#125;&#125; &lt;span @click.stop=&quot;tab_cancel(option.id)&quot; class=&quot;j_close&quot; v-if=&quot;selected.indexOf(option.id) !== -1 &amp;&amp; hover_idx == option.id&quot;&gt;x&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;j_div_more&quot;&gt; &lt;div class=&quot;j_btn_more&quot; v-if=&quot;show_little&quot; @click=&apos;show_little = !show_little&apos;&gt;更多&lt;/div&gt; &lt;div class=&quot;j_btn_more&quot; v-if=&quot;!show_little&quot; @click=&apos;show_little = !show_little&apos;&gt;收起&lt;/div&gt; &lt;/div&gt; &lt;div v-if=&apos;selected.length&apos; class=&quot;j_div_selected&quot;&gt; &lt;label title=&quot;点击清空已选&quot; style=&quot;cursor:pointer;&quot; @click=&quot;clear_all&quot;&gt;已选：&lt;/label&gt; &lt;span v-for=&quot;option in data&quot;&gt; &lt;span class=&quot;j_sp_selected&quot; @mouseover=&quot;hover_idx_sel = s&quot; @mouseout=&quot;hover_idx_sel = null&quot; v-for=&quot;s in selected&quot; v-if=&quot;option.id == s&quot;&gt; &#123;&#123;option.name&#125;&#125; &lt;span v-if=&quot;hover_idx_sel == s&quot; class=&quot;j_close&quot; @click=&apos;tab_cancel(s)&apos;&gt;x&lt;/span&gt; &lt;/span&gt; &lt;/span&gt; &lt;span class=&quot;j_sp_selected&quot; v-if=&quot;selected == &apos;all&apos;&quot;&gt;全部&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; script methods部分123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657select_all: function()&#123; /* tab 点全选选择所有和取消 */ if(this.disable)return; if(this.selected != &apos;all&apos;)this.selected = &apos;all&apos;; else this.selected = []; this.$emit(&apos;callback&apos;,this.selected);&#125;,select_tab: function(obj)&#123; /* tab 选择单个选项 */ if(this.disable)return; if(!this.multiple)&#123; this.selected.length = 0; this.selected.push(obj.id); this.$emit(&apos;callback&apos;,this.selected); return; &#125; if(this.selected === &apos;all&apos;)&#123; this.selected = []; &#125; if(this.selected.indexOf(obj.id) === -1)&#123; this.selected.push(obj.id); &#125; this.$emit(&apos;callback&apos;,this.selected);&#125;,tab_cancel: function(idx)&#123; /* tab 取消单个选项 */ if(this.disable)return; if(this.selected.indexOf(idx) === -1)&#123; return; &#125; else&#123; this.selected.splice(this.selected.indexOf(idx),1); this.$emit(&apos;callback&apos;,this.selected); &#125;&#125;,select_reverse: function()&#123; /* tab 反选当前选项 */ if(this.disable)return; if(this.selected == &apos;all&apos;)this.selected = []; else if(this.selected.length == 0)this.selected = &apos;all&apos;; else&#123; let arr = []; for(let i = 0; i &lt; this.data.length; i++ )&#123; if(this.selected.indexOf(this.data[i].id) === -1)&#123; arr.push(this.data[i].id); &#125; &#125; this.selected = arr; &#125; this.$emit(&apos;callback&apos;,this.selected);&#125;,clear_all: function()&#123; /* tab 清除所有选项 */ if(this.disable)return; this.selected = []; this.$emit(&apos;callback&apos;,this.selected);&#125;, css部分1234567891011.j_div_tab&#123;color:#666;background-color:#f5f5f5;color:#333;&#125; .j_div_tab .j_ul_tab&#123;padding:10px 20px;width:80%;float:left;overflow:hidden;&#125; .j_div_tab .j_ul_show_little&#123;height:33px;&#125; .j_div_tab .j_ul_tab li&#123;list-style:none;float:left;padding:6px 15px;border:1px solid #bbbbbb;margin-left:20px;border-radius:3px;cursor:pointer;position:relative;margin-bottom:10px;&#125; .j_div_tab .j_ul_tab li:hover&#123;border:1px solid #3896f8;color:#3896f8;&#125; .j_div_tab .j_ul_tab .selected&#123;border:1px solid #3896f8;color:#fff!important;background-color:#3896f8;&#125; .j_div_tab .j_close&#123;display:inline-block;width:14px;height:14px;border-radius:50%;background-color:#FF0033;color:#fff;line-height:12px;position:absolute;text-align:center;top:-5px;right:-5px;user-select:none;&#125; .j_div_tab .j_div_more&#123;width:10%;float:left;&#125; .j_div_tab .j_btn_more&#123;width:60px;;height:31px;border:1px solid #bbbbbb;background-color:#bbbbbb;color:#fff;cursor:pointer;border-radius:3px;margin-top:25px;line-height:31px;text-align:center;&#125; .j_div_tab .j_div_selected&#123;width:100%;float:left;text-align:left;padding:0 0 10px 40px;&#125; .j_div_tab .j_sp_selected&#123;padding:5px 15px;background-color:#fff;border:1px solid #3896f8; border-radius:3px;cursor:pointer;margin: 0 20px 10px 0;display:inline-block;position:relative;&#125; 1.4 checkbox复选框template部分123456&lt;div v-if=&quot;type == &apos;checkbox&apos;&quot; class=&quot;j_div_checkbox&quot;&gt; &lt;label v-for=&quot;option in data&quot; class=&quot;j_lb_ck&quot; @mouseover=&quot;hover_idx = option.id&quot; @mouseout=&quot;hover_idx = null&quot; @click=&quot;select_ck(option)&quot;&gt; &lt;i class=&quot;j_i_ck j_ck_uncheck&quot; :class=&quot;&#123;&apos;j_ck_checked_dis&apos;:disable &amp;&amp; data_select.indexOf(option.id) !== -1,&apos;j_ck_uncheck_dis&apos;:disable == &apos;all&apos; &amp;&amp; data_select.indexOf(option.id) === -1,&apos;j_ck_checked&apos;:selected.indexOf(option.id) !== -1,&apos;j_ck_hover&apos;:hover_idx == option.id&#125;&quot;&gt;&lt;/i&gt; &lt;span :class=&quot;&#123;&apos;j_sp_ck_dis&apos;:disable &amp;&amp; data_select.indexOf(option.id) !== -1 || disable === &apos;all&apos;,&apos;j_sp_ck&apos;:hover_idx == option.id || selected.indexOf(option.id) !== -1&#125;&quot;&gt;&#123;&#123;option.name&#125;&#125;&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; script methods部分12345678910111213141516select_ck: function(obj)&#123; /* checkbox 点击选择某个选项 */ if(this.disable == &apos;part&apos; &amp;&amp; this.data_select.indexOf(obj.id) !== -1)&#123; return; &#125; if(this.disable == &apos;all&apos;)&#123; return; &#125; if(this.selected.indexOf(obj.id) !== -1)&#123; this.selected.splice(this.selected.indexOf(obj.id),1); &#125; else&#123; this.selected.push(obj.id); &#125; this.$emit(&apos;callback&apos;,this.selected); &#125;, css部分12345678910.j_div_checkbox&#123;color:#666;user-select:none;&#125; .j_div_checkbox .j_lb_ck&#123;margin-right:15px;display:inline-block;position:relative;height:25px;line-height:25px;&#125; .j_div_checkbox .j_sp_ck&#123;color:#3896f8;cursor:pointer;&#125; .j_div_checkbox .j_sp_ck_dis&#123;color:#bbb!important;cursor:not-allowed;&#125; .j_div_checkbox .j_i_ck&#123;display:inline-block;width:14px;height:14px;position:relative;top:2px;cursor:pointer;&#125; .j_div_checkbox .j_ck_uncheck&#123;background:url(./img/checkbox_unchecked.png) no-repeat;cursor:pointer;&#125; .j_div_checkbox .j_ck_hover&#123;background:url(./img/checkbox_hover.png) no-repeat;cursor:pointer;&#125; .j_div_checkbox .j_ck_checked&#123;background:url(./img/checkbox_check.png) no-repeat;cursor:pointer;&#125; .j_div_checkbox .j_ck_checked_dis&#123;background:url(./img/checkbox_check_disabled.png) no-repeat;cursor:not-allowed;&#125; .j_div_checkbox .j_ck_uncheck_dis&#123;background:url(./img/checkbox_disabled.png) no-repeat;cursor:not-allowed;&#125; 1.5 radio单选按钮template 部分123456&lt;div v-if=&quot;type == &apos;radio&apos;&quot; class=&quot;j_div_radio&quot;&gt; &lt;label v-for=&quot;option in data&quot; class=&quot;j_lb_rd&quot; @mouseover=&quot;hover_idx = option.id&quot; @mouseout=&quot;hover_idx = null&quot; @click=&quot;select_rd(option)&quot;&gt; &lt;i class=&quot;j_i_rd j_rd_uncheck&quot; :class=&quot;&#123;&apos;j_rd_checked_dis&apos;:disable &amp;&amp; selected == option.id,&apos;j_rd_uncheck_dis&apos;:disable,&apos;j_rd_checked&apos;:selected == option.id,&apos;j_rd_hover&apos;:hover_idx == option.id&#125;&quot;&gt;&lt;/i&gt; &lt;span :class=&quot;&#123;&apos;j_sp_rd_dis&apos;:disable,&apos;j_sp_rd&apos;:selected == option.id || hover_idx == option.id&#125;&quot;&gt;&#123;&#123;option.name&#125;&#125;&lt;/span&gt; &lt;/label&gt; &lt;/div&gt; script methods部分123456select_rd: function(obj)&#123; /* radio 点击选择某个选项 */ if(this.disable)return; this.selected = obj.id; this.$emit(&apos;callback&apos;,this.selected); &#125;, css部分12345678910.j_div_radio&#123;color:#666;user-select:none;&#125; .j_div_radio .j_lb_rd&#123;margin-right:15px;display:inline-block;position:relative;height:25px;line-height:25px;&#125; .j_div_radio .j_sp_rd&#123;color:#3896f8;cursor:pointer;&#125; .j_div_radio .j_sp_rd_dis&#123;color:#bbb!important;cursor:not-allowed;&#125; .j_div_radio .j_i_rd&#123;display:inline-block;width:14px;height:14px;position:relative;top:2px;cursor:pointer;&#125; .j_div_radio .j_rd_uncheck&#123;background:url(./img/radio-unchecked.png) no-repeat;cursor:pointer;&#125; .j_div_radio .j_rd_hover&#123;background:url(./img/radio-hover.png) no-repeat;cursor:pointer;&#125; .j_div_radio .j_rd_checked&#123;background:url(./img/radio-check.png) no-repeat;cursor:pointer;&#125; .j_div_radio .j_rd_checked_dis&#123;background:url(./img/radio-disabled_check.png) no-repeat!important;cursor:not-allowed;&#125; .j_div_radio .j_rd_uncheck_dis&#123;background:url(./img/radio-disabled.png) no-repeat;cursor:not-allowed;&#125; 1.6 complete自动补全template 部分123456789101112131415&lt;div v-if=&quot;type == &apos;complete&apos;&quot; class=&quot;j_div_complete&quot;&gt; &lt;div class=&quot;j_div_inner&quot; :style=&quot;&#123;&apos;cursor&apos;:disable?&apos;not-allowed!important&apos;:&apos;&apos;&#125;&quot;&gt; &lt;div class=&quot;j_div_selected&quot; @click=&quot;get_focus_comp&quot;&gt; &lt;span v-for=&apos;option in data_select&apos;&gt; &lt;span v-if=&quot;option.id == s&quot; class=&quot;j_sp_selected&quot; v-for=&apos;s in selected&apos;&gt;&lt;span @click.stop=&quot;cancel_comp(option)&quot; class=&quot;j_close&quot; :style=&quot;&#123;&apos;cursor&apos;:disable?&apos;not-allowed&apos;:&apos;&apos;&#125;&quot;&gt;x&lt;/span&gt;&#123;&#123;option.name&#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;input :style=&quot;&#123;&apos;cursor&apos;:disable?&apos;not-allowed!important&apos;:&apos;&apos;&#125;&quot; :disabled=&quot;disable&quot; type=&quot;text&quot; v-model=&quot;compValue&quot; class=&quot;j_input_comp&quot; @focus=&quot;focus = true&quot; @blur=&quot;hide_comp&quot; @keydown=&quot;listen_comp&quot;&gt; &lt;/div&gt; &lt;div class=&quot;div_options&quot; v-if=&apos;selected.length &lt; data.length&apos; :class=&quot;&#123;&apos;hide&apos;:!focus&#125;&quot;&gt; &lt;span @mouseover=&quot;clear_style&quot; class=&quot;j_sp_option&quot; @click=&apos;select_comp(option)&apos; v-for=&quot;(option,key) in data&quot; v-if=&quot;selected.indexOf(option.id) === -1 &amp;&amp; (option.name.indexOf(compValue) !== -1 || !compValue)&quot; :class=&quot;&#123;&apos;j_sp_option_hover&apos;:key === i&#125;&quot;&gt; &lt;span class=&quot;j_sp_margin&quot;&gt;&#123;&#123;option.name&#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; script methods部分123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105select_comp: function(obj)&#123; /* complete 点击选择某个选项 */ if(this.disable)return; this.compValue = null; this.selected.push(obj.id); this.$emit(&apos;callback&apos;,this.selected); &#125;, cancel_comp: function(obj)&#123; /* complete 取消某个选项 */ if(this.disable)return; this.selected.splice(this.selected.indexOf(obj.id),1); this.$emit(&apos;callback&apos;,this.selected); &#125;, hide_comp: function()&#123; /* complete 隐藏选项 */ let t = this; setTimeout(function()&#123; t.focus = false; &#125;,150); &#125;, get_focus_comp: function()&#123; /* complete 文本框获得焦点 */ if(this.disable)return; let e = event; if(e.target.nodeName === &apos;INPUT&apos; || e.target.nodeName === &apos;SPAN&apos;)return; setTimeout(function()&#123; e.target.lastChild.focus(); &#125;,150); this.i = 0; &#125;, listen_comp: function()&#123; /* complete js监听键盘事件，模拟上下键 */ if(this.disable)return; let code = event.keyCode; if(code === 40)&#123; /* 向上键触发事件 */ let nodes = event.target.parentNode.parentNode.lastChild.childNodes; let nodes_new = []; for(let i = 0; i &lt; nodes.length; i++)&#123; if(nodes[i].nodeName === &apos;SPAN&apos;)&#123; nodes_new.push(nodes[i]); &#125; &#125; if(this.i === null)&#123;this.i = 0;&#125; else&#123; if(this.i &gt;= nodes.length -1 )return; this.i++; &#125; while(nodes[this.i] &amp;&amp; nodes[this.i].nodeName !== &apos;SPAN&apos;)&#123; this.i++; &#125; if(this.i &gt;= nodes.length -1 )this.i = nodes.length-1; return; &#125; if(code === 38)&#123; /* 向下键触发事件 */ let nodes = event.target.parentNode.parentNode.lastChild.childNodes; let nodes_new = []; for(let i = 0; i &lt; nodes.length; i++)&#123; if(nodes[i].nodeName === &apos;SPAN&apos;)&#123; nodes_new.push(nodes[i]); &#125; &#125; if(this.i &lt;= 0 || this.i === null)return; this.i--; while(nodes[this.i] &amp;&amp; nodes[this.i].nodeName !== &apos;SPAN&apos;)&#123; this.i-- &#125; return; &#125; if(code === 13)&#123; /* enter键触发事件 */ let nodes = event.target.parentNode.parentNode.lastChild.childNodes; let nodes_new = []; for(let i = 0; i &lt; nodes.length; i++)&#123; if(nodes[i].nodeName === &apos;SPAN&apos;)&#123; nodes_new.push(nodes[i]); &#125; &#125; if(this.i &gt;= nodes_new.length)this.i = nodes_new.length; if(this.i === null)return; for(let i = 0; i &lt; nodes_new.length; i++)&#123; if(nodes_new[i].getAttribute(&apos;class&apos;) === &quot;j_sp_option j_sp_option_hover&quot;)&#123; nodes_new[i].click(); break; &#125; &#125; this.i++; while(nodes[this.i] &amp;&amp; nodes[this.i].nodeName !== &apos;SPAN&apos;)&#123; this.i++; &#125; return; &#125; &#125;, clear_style: function()&#123; /* complete 清除选项hover样式 */ this.i = 0; let nodes = event.target.parentNode.childNodes; for(let i = 0; i &lt; nodes.length; i++)&#123; if(nodes[i].nodeName === &apos;SPAN&apos; &amp;&amp; nodes[i].childNodes)&#123; nodes[i].setAttribute(&apos;class&apos;,&apos;j_sp_option&apos;); &#125; &#125; &#125;, css部分1234567891011.j_div_complete&#123;user-select:none;&#125; .j_div_complete .j_div_inner&#123;position:relative;width:300px;box-shadow:0 0 4px #ddd;&#125; .j_div_complete .j_div_selected&#123;border:1px solid #ddd;padding:10px;text-align:left;&#125; .j_div_complete .j_sp_selected&#123;padding:3px 5px 3px 18px;border:1px solid #F77825;background-color:#f9eae1;margin:0 5px 5px 0;position:relative;float:left;&#125; .j_div_complete .j_close&#123;position:relative;left:-10px;color:#bbb;cursor:pointer;&#125; .j_div_complete .j_input_comp&#123;border:none;outline:none;width:100px;background-color:#fff;&#125; .j_div_complete .div_options&#123;width:298px;border:1px solid #ddd;border-top:none;position:absolute;z-index:1000;background-color:#fff;max-height:150px;overflow:auto;&#125; .j_div_complete .j_sp_option&#123;display:block;height:28px;line-height:28px;text-align:left;cursor:pointer;&#125; .j_div_complete .j_sp_option:hover&#123;background-color:#ddd;&#125; .j_div_complete .j_sp_option_hover&#123;background-color:#ddd;&#125; .j_div_complete .j_sp_margin&#123; margin-left:10px;&#125; 1.7 switch开关按钮template 部分123&lt;div v-if=&quot;type == &apos;switch&apos;&quot; class=&quot;j_div_switch&quot;&gt; &lt;span class=&quot;switch&quot; :style=&quot;&#123;cursor:disable?&apos;not-allowed&apos;:&apos;pointer&apos;&#125;&quot; :class=&quot;&#123;&apos;j_switch_selected&apos;:selected&#125;&quot; @click=&quot;selected_switch&quot;&gt;&lt;i class=&quot; j_switch_normal&quot; :class=&quot;&#123;&apos;j_switch_normal_active&apos;:selected&#125;&quot;&gt;&lt;/i&gt;&lt;/span&gt; &lt;/div&gt; script methods部分123456selected_switch: function()&#123; /* switch 按钮 */ if (this.disable) &#123;return;&#125; this.selected = !this.selected; this.$emit(&apos;callback&apos;,this.selected); &#125; css部分12345.j_div_switch&#123;float:left;&#125; .j_div_switch .switch&#123;display:inline-block;width:80px;height:30px;background-color:#ddd;border-radius:30px;position:realtive;transition: background-color 0.5s;&#125; .j_div_switch .j_switch_selected&#123;background-color:#3896f8;&#125; .j_div_switch .j_switch_normal&#123;content:&apos;&apos;;position:relative;display:inline-block;width:28px;height:28px;border-radius:30px;background-color:#fff;top:1px;left:1px;transition: left 0.5s;&#125; .j_div_switch .j_switch_normal_active&#123;left:51px!important;&#125; 2 组件注册和引入不再赘述具体流程参见评分插件的引用 3 组件配置3.1 参数配置参数名参数意义默认值是否必须type引用类型：select、tab、checkbox、radio、switch、completenull是data选项列表null/false否(除了switch均必须)disable是否禁用(除了checkbox可选‘all’、‘part’表示全部、部分禁用，其他一律true全部禁用)false否selected已选参数（select、radio传入一个数值；checkbox、tab传入一个数组，switch传入Boolean类型参数）null/false否queryselect下拉列表是否携带query查询false否multipletab类型是否复选false否 3.2 回调函数&lt;my-select :select=&quot;selectObj&quot; @callback=&quot;pick&quot;&gt;&lt;/my-select&gt;当选项值改变时触发，可在callback处定义具体操作 4 效果图","categories":[],"tags":[]},{"title":"","slug":"vue dialog 弹窗插件","date":"2018-08-13T08:14:10.407Z","updated":"2018-08-13T08:30:14.181Z","comments":true,"path":"2018/08/13/vue dialog 弹窗插件/","link":"","permalink":"http://yoursite.com/2018/08/13/vue dialog 弹窗插件/","excerpt":"vue dialog 弹窗插件标签（空格分隔）： vue javascript dialog 插件 tips：本次主要封装了开发过程常见的confirm（确认）、alert（警告）、prompt（输入）、tips（提示）、loading（加载）对话框","text":"vue dialog 弹窗插件标签（空格分隔）： vue javascript dialog 插件 tips：本次主要封装了开发过程常见的confirm（确认）、alert（警告）、prompt（输入）、tips（提示）、loading（加载）对话框 1 组件部分1.1 template部分12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;template&gt; &lt;transition name=&apos;fade&apos;&gt; &lt;div v-if=&quot;type&quot;&gt; &lt;div class=&quot;j_d_modal&quot; :class=&quot;&#123;&apos;j_d_modal_white&apos;: type == &apos;loading&apos;&#125;&quot; v-if=&apos;type != &quot;msg&quot;&apos; @click=&quot;hide&quot;&gt;&lt;/div&gt; &lt;!-- 确认对话框 --&gt; &lt;div class=&quot;j_diy_dialog_window clearfix&quot; ref=&quot;MyWindow&quot; id=&quot;j_diy_dialog_window&quot; style=&quot;opacity:0&quot; v-if=&apos;type == &quot;confirm&quot;&apos;&gt; &lt;div class=&quot;j_head_div clearfix&quot;&gt; &lt;span class=&quot;j_sp_title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/span&gt; &lt;span class=&quot;j_sp_close&quot; @click=&quot;hide&quot;&gt;X&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_body_div clearfix&quot;&gt; &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_btn_group clearfix&quot;&gt; &lt;button class=&quot;btn j_btn-ensure&quot; @click=&apos;ensure&apos;&gt;确认&lt;/button&gt; &lt;button class=&quot;btn j_btn-cancel&quot; @click=&apos;cancel&apos;&gt;取消&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 提示信息对话框 --&gt; &lt;div class=&quot;j_msg_body_init clearfix&quot; ref=&quot;MyWindow&quot; id=&quot;j_diy_dialog_window&quot; v-if=&apos;type == &quot;msg&quot;&apos; @click=&quot;hide&quot;&gt; &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;!-- 警告对话框 --&gt; &lt;div class=&quot;j_diy_dialog_window clearfix&quot; ref=&quot;MyWindow&quot; id=&quot;j_diy_dialog_window&quot; style=&quot;opacity:0&quot; v-if=&apos;type == &quot;alert&quot;&apos;&gt; &lt;div class=&quot;j_head_div clearfix&quot;&gt; &lt;span class=&quot;j_sp_title&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/span&gt; &lt;span class=&quot;j_sp_close&quot; @click=&quot;hide&quot;&gt;X&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_body_div clearfix&quot;&gt; &lt;div class=&quot;j_alert_img_div clearfix&quot;&gt;&lt;div class=&quot;j_alert_img&quot;&gt;!&lt;/div&gt;&lt;/div&gt; &lt;div class=&quot;j_alert_msg_div clearfix&quot;&gt; &lt;span class=&quot;j_alert_msg&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;j_btn_group clearfix&quot;&gt; &lt;button class=&quot;btn j_btn-ensure&quot; @click=&apos;alert_ensure&apos; style=&quot;float:right;margin-right:20px;&quot;&gt;确认&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 加载对话框 --&gt; &lt;div class=&quot;j_loading_body clearfix&quot; ref=&quot;MyWindow&quot; id=&quot;j_diy_dialog_window&quot; style=&quot;opacity:0&quot; v-if=&apos;type == &quot;loading&quot;&apos;&gt; &lt;div class=&quot;loading&quot;&gt;&lt;/div&gt; &lt;span class=&quot;j_loading_msg&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;!-- prompt对话框 --&gt; &lt;div class=&quot;j_diy_dialog_window clearfix&quot; ref=&quot;MyWindow&quot; id=&quot;j_diy_dialog_window&quot; style=&quot;opacity:0&quot; v-if=&apos;type == &quot;prompt&quot;&apos;&gt; &lt;div class=&quot;j_head_div clearfix&quot;&gt; &lt;span class=&quot;j_sp_title&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt; &lt;span class=&quot;j_sp_close&quot; @click=&quot;hide&quot;&gt;X&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_body_div clearfix&quot;&gt; &lt;!-- &lt;label class=&quot;j_input_title&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/label&gt; --&gt; &lt;input type=&quot;text&quot; id=&quot;j_diy_dialog_window_input&quot; v-model=&apos;prompt_value&apos; class=&quot;input&quot; :class=&quot;&#123;&apos;j_input_focus&apos;:focus&#125;&quot; :focus=&apos;focus = true&apos;&gt; &lt;/div&gt; &lt;div class=&quot;j_btn_group clearfix&quot;&gt; &lt;button class=&quot;btn j_btn-ensure&quot; @click=&apos;ensure&apos;&gt;确认&lt;/button&gt; &lt;button class=&quot;btn j_btn-cancel&quot; @click=&apos;cancel&apos;&gt;取消&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/transition&gt;&lt;/template&gt; 1.2 script部分123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215&lt;script&gt; export default &#123; data()&#123; return &#123; type: &apos;&apos;,//对话框类型 title: &apos;提示信息&apos;,//对话框title msg: &apos;&apos;,//对话框提示信息 timing: 3,//msg对话框存在时间 time_out: null,//用于取消msg对话框定时任务 no: &apos;&apos;,//confirm回调函数（取消） yes: &apos;&apos;,//confirm回调函数（确定） callback: &apos;&apos;,//alert回调函数 prompt_value:&apos;&apos;,//prompt输入框值 focus: false &#125; &#125;, props:&#123; dialog:&#123; type:Object, default:null &#125; &#125;, methods: &#123; open: function(obj)&#123; /* open 传入 type 打开对应对话框 */ let t = this; if(obj)&#123; for(let key in obj)&#123; this.$data[key] = obj[key]; &#125; if(this.type == &apos;msg&apos;)&#123; t.timing = t.timing || 3; setTimeout(function()&#123; let win = document.getElementById(&apos;j_diy_dialog_window&apos;); setTimeout(function()&#123; win.setAttribute(&apos;class&apos;,&apos;j_msg_body clearfix&apos;); t.setPosition(); t.time_out = setTimeout(function()&#123; t.hide(); &#125;,t.timing*1000); &#125;,10); &#125;,100); &#125; else&#123; setTimeout(function()&#123; t.setPosition(); &#125;,10); &#125; if(this.type == &apos;loading&apos;)&#123; this.msg = this.msg || &apos;loading&apos;; &#125; &#125; &#125;, hide: function()&#123; /* 隐藏对话框 */ if(this.type == &apos;loading&apos;)&#123; return; &#125; this.type = false; clearTimeout(this.time_out); &#125;, hideAll: function()&#123; /* 隐藏所有对话框 */ clearTimeout(this.time_out); this.type = false; &#125;, setPosition: function()&#123; /* 调整对话框在窗口的位置 */ let b_width = window.innerWidth; let b_height = window.innerHeight; let win = document.getElementById(&apos;j_diy_dialog_window&apos;); let offset_w = (b_width - win.offsetWidth-100)/2; let style_txt = &apos;left:&apos; + offset_w + &apos;px;&apos;; if(win.offsetHeight &lt; b_height)&#123; style_txt += &apos;top:&apos; + (b_height - win.offsetHeight-200)/2 +&apos;px&apos;; &#125; win.setAttribute(&apos;style&apos;,style_txt); &#125;, ensure: function()&#123; /* confirm 确定按钮 */ this.yes &amp;&amp; this.yes(); this.hide(); &#125;, cancel: function()&#123; /* confirm 取消按钮 */ this.no &amp;&amp; this.no(); this.hide(); &#125;, alert_ensure: function()&#123; /* alert 确定按钮 */ this.callback &amp;&amp; this.callback(); this.hide(); &#125;, tips: function(str,timing)&#123; if(this.type) this.hideAll(); let t = this; /* msg 纯提示对话框 */ setTimeout(function()&#123; t.type = &apos;msg&apos;; t.msg = str || &apos;请输入提示信息&apos;; t.timing = timing || 3; setTimeout(function()&#123; let win = document.getElementById(&apos;j_diy_dialog_window&apos;); setTimeout(function()&#123; win.setAttribute(&apos;class&apos;,&apos;j_msg_body clearfix&apos;); t.setPosition(); t.time_out = setTimeout(function()&#123; t.hide(); &#125;,t.timing*1000); &#125;,10); &#125;,100); &#125;,10); &#125;, confirm: function()&#123; /* confirm 确认对话框 */ if(this.type) this.hideAll(); let t = this; let args = arguments; setTimeout(function()&#123; t.type = &apos;confirm&apos;; if(args[0])&#123; t.msg = args[0]; &#125; else&#123; t.msg = &apos;确认要干什么？&apos;; &#125; if(args[1])&#123; t.yes = args[1]; &#125; if(args[2])&#123; t.no = args[2]; &#125; setTimeout(function()&#123; t.setPosition(); &#125;,10); &#125;,10); &#125;, alert: function()&#123; /* alert 警告对话框 */ if(this.type) this.hideAll(); let t = this; let args = arguments; setTimeout(function()&#123; t.type = &apos;alert&apos;; if(args[0])&#123; t.msg = args[0]; &#125; else&#123; t.msg = &apos;请确认什么？&apos;; &#125; if(args[1])&#123; t.callback = args[1]; &#125; setTimeout(function()&#123; t.setPosition(); &#125;,10); &#125;,10); &#125;, loading: function(str)&#123; /* loading 加载对话框 */ if(this.type) this.hideAll(); let t = this; setTimeout(function()&#123; t.type = &apos;loading&apos;; t.msg = str || &apos;loading&apos;; setTimeout(function()&#123; t.setPosition(); &#125;,10); &#125;,10); &#125;, prompt: function()&#123; /* prompt 输入对话框 */ if(this.type) this.hideAll(); let t = this; let args = arguments; setTimeout(function()&#123; t.type = &apos;prompt&apos;; if(args[0])&#123; t.msg = args[0]; &#125; else&#123; t.msg = &apos;请输入标题&apos;; &#125; if(args[1])&#123; t.prompt_value = args[1]; &#125; if(args[2])&#123; t.yes = args[2]; &#125; if(args[3])&#123; t.no = args[3]; &#125; setTimeout(function()&#123; t.setPosition(); document.getElementById(&apos;j_diy_dialog_window_input&apos;).focus(); &#125;,10); &#125;,10); &#125; &#125;, mounted() &#123; let t = this; window.onresize = function()&#123; if(document.getElementById(&apos;j_diy_dialog_window&apos;))&#123; t.setPosition(); &#125; /* 当窗口大小改变 改变对话框的位置 */ &#125; &#125; &#125;&lt;/script&gt; 1.3 css部分12345678910111213141516171819202122232425262728293031323334&lt;style scoped&gt; .hide&#123;display:none;&#125; .j_d_modal&#123;position: fixed;top: 0;left: 0;width: 100%;height: 100%;z-index: 100000;background-color: #000;opacity: 0.5;font-size:14px;&#125; .j_diy_dialog_window&#123;position: fixed;top: 30%;left: 0;max-width: 500px;min-width: 250px;min-height: 50px;background-color: #fff;z-index: 110000;border-radius: 3px;box-shadow:3px 3px 5px #666;color:#666;text-align:center; &#125; .j_head_div&#123;padding:5px;border-bottom:1px solid #dddddd;font-size:12px;&#125; .j_body_div&#123;padding:10px 10px 30px 10px;;text-align:center;&#125; .j_sp_title&#123;float:left;margin-right:20px;&#125; .j_sp_close&#123;float:right;cursor:pointer;&#125; .j_sp_close:hover&#123;color:#3896fe;&#125; .j_btn_group&#123;text-align:center;padding-bottom:10px;&#125; .btn&#123;cursor:pointer;width:60px;height:25px;border-radius:2px;outline:none;&#125; .j_btn-ensure&#123;color:#fff;background-color:#3896fe;border:1px solid #3896fe;margin-right:10px;&#125; .j_btn-ensure:hover&#123;background-color:#428bca;border:1px solid #428bca;&#125; .j_btn-cancel&#123;color:#666;background-color:#dddddd;border:1px solid #dddddd;&#125; .j_btn-cancel:hover&#123;background-color:#bbbbbb;border:1px solid #bbbbbb;&#125; .j_msg_body_init&#123;width:0;height:0;opacity:0;top:50%;left:50%;over-flow:hidden; transition: width 1s;position:fixed;&#125; .j_msg_body&#123;padding:15px 40px;background-color:#000;color:#fff;opacity:0.6;border-radius:5px;cursor:pointer;max-width:300px;position:fixed;z-index: 110000;text-align:center;&#125; .j_alert_img_div&#123;width:60px;float:left;height:100%;&#125; .j_alert_img&#123;content:&apos;!&apos;;position:relative;width:32px;height:32px;background-color:#D80000;display:inline-block;z-index:120000;color:white;line-height:32px;font-size:20px;font-weight:600;border-radius:50%;text-align:center;margin-top:10px;&#125; .j_alert_msg_div&#123;width:70%;float:left;height:100%;text-align:left;padding-top:14px;&#125; .j_alert_msg&#123;margin-top:10px;&#125; .j_loading_body&#123;padding:20px;background-color:#333;opacity:0.7;position:fixed;z-index:110000;color:#fff;border-radius:15px;min-width:80px;text-align:center;&#125; .loading&#123;width:100%;height:32px;display:block;background:url(&apos;./img/loading.gif&apos;) no-repeat center;margin-left:10xp;text-align:center;margin-bottom:10px;&#125; .j_loading_msg&#123;white-space:wrapped;&#125; .j_d_modal_white&#123;background-color:transparent!important;&#125; .input&#123;outline:none;border:1px solid #dddddd;height:30px;padding:0 10px;width:60%;border-radius:5px;&#125; .j_input_focus,.input:hover&#123;border:1px solid #3896f3!important;&#125; .j_input_title&#123;display:inline-block;height:32px;line-height:32px;margin-right:10px;&#125; .j_input_title:after&#123;content:&apos;：&apos;;position:relative;&#125;&lt;/style&gt; 2 组件注册及引用12345678910import Vue from &apos;vue&apos;;import vDialog from &apos;./dialog.vue&apos;;const dialog = &#123; install : function()&#123; Vue.component(&apos;my-dialog&apos;,vDialog); &#125;&#125;;export default dialog; 12import vDialog from &apos;../components/VDialog/dialog.js&apos;Vue.use(vDialog); 3 组件配置 弹框组件不同于一般组件，在需要用到的时候才插入。由于弹框插件在web开发的各个阶段均能用到，如果每用到一次就插入一次显得太麻烦和臃肿，因此弹窗插件最好放在整个页面架构处，这样只要页面加载出来，就可以在页面任何地方和时机调用1&lt;my-dialog ref=&quot;Layer&quot;&gt;&lt;/my-dialog&gt; #####tips：上面是页面引用，下面是script部分，将弹窗对象挂载到Vue原型上，这样就可以通过this.Layer调用弹窗1Vue.prototype.Layer = this.$refs.Layer; #####具体调用 let layer = this.Layer; 窗口类型 调用 参数说明 确认对话框 layer.confirm(arg1,arg2,arg3) arg1:确认文本信息arg2:点击确认按钮执行的回调函数arg3:点击取消按钮执行的回调函数 警告对话框 layer.alert(arg1,arg2) arg1:警告文本arg2:点击确认按钮执行的回调函数 输入对话框 layer.prompt(arg1,arg2,arg3,arg4) arg1:文本信息 arg2:输入框值 arg3:点击确认按钮执行的回调函数 arg4:点击取消按钮执行的回调函数 信息对话框 layer.tips(arg1,arg2) arg1:文本信息arg2:对话框停留时间 加载对话框 layer.loading(arg1) arg1:加载时显示的文本信息 关闭对话框 layer.hide() 无 关闭所有对话框 layer.hideAll() 无 打开指定对话框 layer.open(arg1) arg1 = {type:””,//打开窗口类型（prompt除外）msg:””,//文本信息title:””,//对话框标题yes(),//confirm对应的确定按钮回调函数no(),//confirm对应的取消按钮回调函数callback(),//alert对应的确定按钮回调函数timing//msg对话框对应的存在时间，单位：秒} 4 效果图","categories":[],"tags":[]},{"title":"","slug":"vue pagination 分页插件","date":"2018-08-13T08:10:57.164Z","updated":"2018-08-13T08:10:51.031Z","comments":true,"path":"2018/08/13/vue pagination 分页插件/","link":"","permalink":"http://yoursite.com/2018/08/13/vue pagination 分页插件/","excerpt":"vue pagination 分页插件标签（空格分隔）： vue javascript 插件 1 插件部分1.1 template部分","text":"vue pagination 分页插件标签（空格分隔）： vue javascript 插件 1 插件部分1.1 template部分12345678910111213141516171819202122232425&lt;template&gt; &lt;div class=&quot;j_pagination_div clearfix&quot; v-if=&quot;isShow&quot;&gt; &lt;ul class=&quot;ul&quot;&gt; &lt;li @click=&quot;toPage(1)&quot; :class=&quot;&#123;disabled:current &lt;= 1&#125;&quot;&gt;首页&lt;/li&gt; &lt;li @click=&quot;toPage(current-1)&quot; :class=&quot;&#123;disabled:current &lt;= 1&#125;&quot;&gt;&lt;&lt;/li&gt; &lt;li :class=&quot;&#123;selected:current == p&#125;&quot; v-for=&quot;p in pages&quot; @click=&quot;toPage(p)&quot;&gt;&#123;&#123;p&#125;&#125;&lt;/li&gt; &lt;li @click=&quot;toPage(current+1)&quot; :class=&quot;&#123;disabled:current &gt;= total_page&#125;&quot;&gt;&gt;&lt;/li&gt; &lt;li @click=&quot;toPage(total_page)&quot; :class=&quot;&#123;disabled:current &gt;= total_page&#125;&quot;&gt;尾页&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;j_select_div&quot;&gt; &lt;input type=&quot;text&quot; style=&quot;width: 0;height: 0;border: none;&quot; v-on:focus=&quot;show&quot; v-on:blur=&quot;hide&quot;&gt; &lt;span class=&quot;j_selected_span&quot; @click=&quot;showList($event)&quot;&gt;&#123;&#123;selected_num&#125;&#125;条&lt;/span&gt; &lt;div class=&quot;j_pagenum_list&quot; :class=&quot;&#123;hide:!onSelect&#125;&quot;&gt; &lt;span :class=&quot;&#123;selected:pagenum == selected_num&#125;&quot; v-for=&quot;pagenum in j_pagenum_list&quot; @click=&quot;selectNum(pagenum)&quot;&gt;&#123;&#123;pagenum&#125;&#125;条&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;j_turn_div&quot;&gt; &lt;span class=&quot;j_turn_span&quot;&gt;跳至&lt;/span&gt; &lt;input type=&quot;text&quot; v-model=&quot;input_num&quot; class=&quot;j_turn_input&quot; v-on:keydown=&quot;listen($event)&quot; v-on:blur=&quot;toPage(input_num)&quot;&gt; &lt;span class=&quot;j_turn_total&quot;&gt;/&#123;&#123;total_page&#125;&#125;页,共&#123;&#123;total&#125;&#125;条&lt;/span&gt; &lt;span class=&quot;j_turn_btn&quot;&gt;跳转&lt;/span&gt; &lt;span class=&quot;total&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 1.2 script部分123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155&lt;script&gt; export default&#123; name : &apos;pagination&apos;, data()&#123; return&#123; isShow:false,//是否显示分页插件 total:0,//总条数 pages:[1],//分页列表 current:1,//当前页 selected_num:20,//选择的分页大小 j_pagenum_list:[10,20,50,100],//默认分页大小选择列表 onSelect:false,//判断是否处于选择分页大小，控制隐藏选择列表 input_num:null,//页码输入框 total_page:0,//总页数 show_pages:5,//中间展示页码条数 &#125; &#125;, props:&#123; page:&#123; type:Object, default:null &#125; &#125;, methods:&#123; init:function()&#123; /* 初始化分页插件 */ var t = this; if(this.page)&#123; if(this.page.total)&#123; this.isShow = true; this.total = this.page.total; &#125; if(this.page.current)&#123; this.current = this.page.current; &#125; if(this.page.size &amp;&amp; this.page.size &gt; 0)&#123; if(this.j_pagenum_list.indexOf(this.page.size) == -1)&#123; this.j_pagenum_list.push(this.page.size); &#125; this.selected_num = this.page.size; &#125; if(this.page.show_pages)&#123; if(this.page.show_pages &gt; 10)&#123; this.show_pages = 10; &#125; else if(this.page.show_pages &lt; 3)&#123; this.show_pages = 3; &#125; else this.show_pages = this.page.show_pages; &#125; &#125; this.total_page = Math.ceil(this.total/this.selected_num); if(this.current &gt; this.total_page)&#123; this.current = 1; &#125; this.calculatePages(); &#125;, show:function()&#123; var t = this; setTimeout(function()&#123; t.onSelect = true; &#125;,100); &#125;, hide:function()&#123; var t = this; setTimeout(function()&#123; t.onSelect = false; &#125;,150); &#125;, showList:function(e)&#123; /* 显示分页大小选项 */ e.target.parentNode.firstChild.focus(); &#125;, selectNum:function(num)&#123; /* 选择分页大小 */ this.selected_num = num; this.total_page = Math.ceil(this.total/this.selected_num); this.current = 1; this.input_num = 1; this.calculatePages(); this.$emit(&apos;turn_page&apos;,this.current,this.selected_num); &#125;, calculatePages:function()&#123; /* 计算分页显示数 */ this.pages = []; if(this.total_page &lt;= this.show_pages)&#123; for(var i = 1; i &lt;= this.total_page; i++)&#123; this.pages.push(i); &#125; &#125; if(this.total_page &gt; this.show_pages)&#123; var start = 0,end = 0; if(this.current &lt;= this.show_pages - Math.floor(this.show_pages/2))&#123; start = 1; end = this.show_pages; &#125; else if(this.current &gt;= this.total_page - Math.floor(this.show_pages/2))&#123; start = this.total_page - this.show_pages +1; end = this.total_page; &#125; else&#123; if(Math.ceil(this.show_pages/2) !== Math.floor(this.show_pages/2))&#123; start = this.current - Math.floor(this.show_pages/2); end = this.current + Math.floor(this.show_pages/2); &#125; else&#123; start = this.current - Math.floor(this.show_pages/2)+1; end = this.current + Math.floor(this.show_pages/2); &#125; &#125; for(var i = start; i &lt;= end; i++)&#123; this.pages.push(i); &#125; &#125; &#125;, toPage:function(num)&#123; /* 跳转到指定页 */ num = parseInt(num); if(num &gt; 0 &amp;&amp; num &lt;= this.total_page &amp;&amp; num != this.current)&#123; this.current = num; this.calculatePages(); this.input_num = num; this.$emit(&apos;turn_page&apos;,this.current,this.selected_num); &#125; else&#123; this.input_num = this.current; &#125; &#125;, listen:function(e)&#123; /* 监听文本框输入事件，enter跳转和只让输入数字 */ var code = event.keyCode; if(code&gt;=48 &amp;&amp; code&lt;=57 || code==8 || code&gt;=96 &amp;&amp; code&lt;=105 || code==13)&#123; event.returnValue = true; &#125; else &#123; event.returnValue = false; &#125; if(code == 13)&#123; this.toPage(parseInt(this.input_num)); &#125; &#125; &#125;, mounted()&#123; this.init(); &#125;, watch: &#123; &apos;page.total&apos;: function()&#123; /* 监听数据变化重新初始化分页插件 */ this.init(); &#125; &#125; &#125;&lt;/script&gt; 1.3 css部分12345678910111213141516171819202122&lt;style scoped&gt; .j_pagination_div&#123;font-size: 14px;font-family: &apos;微软雅黑&apos;;user-select: none;float:left;&#125; .j_pagination_div .hide&#123;display: none;&#125; .j_pagination_div .ul&#123;float: left;margin: 0;padding: 0;&#125; .j_pagination_div .ul li&#123;list-style: none;float: left;margin-right: 12px;border: 1px solid #dddddd;max-width: 60px;min-width: 45px;height: 30px;line-height: 30px;text-align: center;border-radius: 3px;cursor: pointer;&#125; .j_pagination_div .ul li.selected&#123;background-color: #3896fe;color: #ffffff!important;border: 1px solid #3896fe;&#125; .j_pagination_div .ul li:hover&#123;color: #3896fe;border: 1px solid #3896fe;&#125; .j_pagination_div .j_select_div&#123;position: relative;float: left;&#125; .j_pagination_div .j_selected_span&#123;text-align:left;display: inline-block;width: 60px;height: 30px;border: 1px solid #dddddd;padding-left: 10px;line-height: 30px;border-radius: 3px;background: url(down.png) no-repeat 50px 10px;cursor: pointer;&#125; .j_pagination_div .j_pagenum_list&#123;position: absolute;border-radius:3px;border: 1px solid #dddddd; width: 70px;top: 35px;left: 5px;background-color: #ffffff;z-index: 10;&#125; .j_pagination_div .j_pagenum_list span&#123;display: block;width: 100%;text-align: center;height: 25px;line-height: 25px;cursor: pointer;&#125; .j_pagination_div .j_pagenum_list .selected&#123;color: #3896fe;&#125; .j_pagination_div .j_turn_div&#123;float: left;margin-left: 15px;&#125; .j_pagination_div .j_turn_input&#123;width: 50px;height: 28px;border: 1px solid #dddddd;text-align: center;border-radius: 3px;position: relative;top: -1px;&#125; .j_pagination_div .j_turn_btn&#123;display: inline-block;width: 50px;height: 30px;border-radius: 3px;background-color: #ffffff;border: 1px solid #dddddd;margin-left: 15px;text-align: center;line-height: 30px;cursor: pointer;&#125; .j_pagination_div .j_turn_btn:hover&#123;background-color: #3896fe;color: #ffffff;border: 1px solid #3896fe;&#125; .j_pagination_div .j_turn_span&#123;display: inline-block;width: 50px;height: 30px;border: 1px solid #ffffff;border-radius: 3px;line-height: 30px;text-align: center;&#125; .j_pagination_div .j_turn_total&#123;display: inline-block;height: 30px;border: 1px solid #ffffff;border-radius: 3px;line-height: 30px;text-align: center;&#125; .j_pagination_div .ul li.disabled&#123;color: #666666!important;border: 1px solid #dddddd!important;background-color: #ffffff!important;cursor: not-allowed!important;&#125; .clearfix:after&#123;display:block;visibility:hidden;clear:both;height:0;content:&apos;.&apos;;&#125; .clearfix&#123;zoom:1;&#125;&lt;/style&gt; 2 组件引用具体引用步骤见评分插件&lt;my-pagination :page=&#39;page&#39; v-on:turn_page=&#39;turn_page&#39;&gt;&lt;/my-pagination&gt;##3 插件配置 ###3.1 属性配置 属性名属性意义默认值是否必须 total总页数null是 current当前页1否 show_pages分页中间展示条目数5否 size列表每页展示条目数20是 ###3.2 回调函数 turn_page函数返回两个参数：page，size对应选择页数和每页大小，具体回调函数功能编写因人而异。 4 效果展示","categories":[],"tags":[]},{"title":"","slug":"vue craousel 轮播插件","date":"2018-08-13T08:08:59.979Z","updated":"2018-08-13T08:08:48.930Z","comments":true,"path":"2018/08/13/vue craousel 轮播插件/","link":"","permalink":"http://yoursite.com/2018/08/13/vue craousel 轮播插件/","excerpt":"vue craousel 轮播插件标签（空格分隔）： vue javascript 插件 1 插件部分1.1 template部分","text":"vue craousel 轮播插件标签（空格分隔）： vue javascript 插件 1 插件部分1.1 template部分12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;template&gt; &lt;div class=&quot;j_div_carousel&quot; v-if=&quot;data.length&quot;&gt; &lt;!-- 左右轮播 --&gt; &lt;div class=&quot;j_div_imgs&quot; @mouseover=&quot;show_arrow = true&quot; @mouseout=&quot;show_arrow = false&quot; v-if=&apos;animate == &quot;left&quot;&apos;&gt; &lt;div class=&quot;j_div_img_show&quot; :style=&quot;&#123;left:left&#125;&quot;&gt; &lt;img class=&quot;j_carousel_img&quot; @click=&quot;turn_page(d.url)&quot; v-for=&quot;d in data&quot; :src=&quot;d.src&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt; &lt;/div&gt; &lt;div class=&quot;j_div_radios&quot; v-if=&quot;banner&quot;&gt; &lt;span :title=&quot;a.name&quot; @click=&apos;select(key)&apos; class=&quot;j_sp_radio&quot; :class=&quot;&#123;&apos;j_sp_radio_selected&apos;:key == index&#125;&quot; v-for=&quot;(a,key) in data&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_div_arrow&quot; v-if=&quot;arrow &amp;&amp; show_arrow&quot;&gt; &lt;span @click=&quot;turn_img(-1)&quot; class=&quot;j_left_arrow&quot; v-if=&apos;index &gt; 0&apos;&gt;&lt;&lt;/span&gt; &lt;span @click=&quot;turn_img(1)&quot; class=&quot;j_right_arrow&quot; v-if=&apos;index &lt; data.length-1&apos;&gt;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 渐隐渐现 --&gt; &lt;div class=&quot;j_div_imgs&quot; @mouseover=&quot;show_arrow = true&quot; @mouseout=&quot;show_arrow = false&quot; v-if=&apos;animate == &quot;disappear&quot;&apos;&gt; &lt;img class=&quot;j_carousel_img j_dis_img&quot; @click=&quot;turn_page(d.url)&quot; v-for=&quot;(d,key) in data&quot; :src=&quot;d.src&quot; width=&quot;100%&quot; height=&quot;100%&quot; :style=&quot;&#123;opacity: key == index ? 1:0&#125;&quot;&gt; &lt;div class=&quot;j_div_radios&quot; v-if=&quot;banner&quot;&gt; &lt;span :title=&quot;a.name&quot; @click=&apos;select(key)&apos; class=&quot;j_sp_radio&quot; :class=&quot;&#123;&apos;j_sp_radio_selected&apos;:key == index&#125;&quot; v-for=&quot;(a,key) in data&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_div_arrow&quot; v-if=&quot;arrow &amp;&amp; show_arrow&quot;&gt; &lt;span @click=&quot;turn_img(-1)&quot; class=&quot;j_left_arrow&quot; v-if=&apos;index &gt; 0&apos;&gt;&lt;&lt;/span&gt; &lt;span @click=&quot;turn_img(1)&quot; class=&quot;j_right_arrow&quot; v-if=&apos;index &lt; data.length-1&apos;&gt;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 上下轮播 --&gt; &lt;div class=&quot;j_div_imgs2&quot; @mouseover=&quot;show_arrow = true&quot; @mouseout=&quot;show_arrow = false&quot; v-if=&apos;animate == &quot;vertical&quot;&apos;&gt; &lt;div class=&quot;j_div_img_show&quot; style=&quot;transition: top 0.5s;&quot; :style=&quot;&#123;top:(-height*index)+&apos;px&apos;&#125;&quot;&gt; &lt;img class=&quot;j_carousel_img&quot; @click=&quot;turn_page(d.url)&quot; v-for=&quot;d in data&quot; :src=&quot;d.src&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt; &lt;/div&gt; &lt;div class=&quot;j_div_radios&quot; v-if=&quot;banner&quot;&gt; &lt;span :title=&quot;a.name&quot; @click=&apos;select(key)&apos; class=&quot;j_sp_radio&quot; :class=&quot;&#123;&apos;j_sp_radio_selected&apos;:key == index&#125;&quot; v-for=&quot;(a,key) in data&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_div_arrow&quot; v-if=&quot;arrow &amp;&amp; show_arrow&quot;&gt; &lt;span @click=&quot;turn_img(-1)&quot; class=&quot;j_left_arrow&quot; v-if=&apos;index &gt; 0&apos;&gt;&lt;&lt;/span&gt; &lt;span @click=&quot;turn_img(1)&quot; class=&quot;j_right_arrow&quot; v-if=&apos;index &lt; data.length-1&apos;&gt;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; Tips:轮播动画不同其实只影响包含图片那层div，和其他部分无关，仔细看template部分可以发现1.2 script部分12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;script&gt; export default &#123; name: &apos;mycarousel&apos;, data()&#123; return&#123; data: null,//轮播图片对象数组 animate: &apos;left&apos;,//轮播动画选择 left disappear vertical click: true,//图片是否支持点击跳转 banner: true,//是否显示底banner banner_click: true,//banner圆点是否支持点击 arrow: true,//是否显示左右切换箭头 left: 0,//animate 为left 时候，用于计算style left值 index: 0,// 记录当前轮播到的图片的数组索引，非id t_out: null,//记录定时任务，当有人为切换播放顺序时，为了避免播放混乱，即清除原定时任务，再重新开始 time: 3,//图片切换间隔时长 show_arrow: false,//记录左右切换箭头是否显示 width: 200,//记录轮播图的宽度 height: 150//记录轮播图的高度 &#125; &#125;, props: &#123; carouselObj: &#123; type: Object, default: null &#125; &#125;, methods: &#123; start_carousel: function()&#123; /* 定时轮播任务 */ let t = this; this.t_out = setTimeout(function()&#123; setTimeout(function()&#123; if(t.index &gt; t.data.length-2)&#123; t.index = 0; &#125; else&#123; t.index++; &#125; if(t.animate === &apos;left&apos;)&#123; t.left = -t.index*t.width + &apos;px&apos;; &#125; else if(t.animate === &apos;vertical&apos;)&#123; &#125; t.start_carousel(); &#125;) &#125;,t.time*1000); &#125;, select: function(index)&#123; /* 人为选择轮播索引 */ if(!this.banner_click)return; this.index = index; this.left = -index*this.width + &apos;px&apos;; clearTimeout(this.t_out); this.start_carousel(); &#125;, turn_img: function(num)&#123; /* 切换左右箭头 */ this.index = this.index + num; this.left = -this.index*this.width + &apos;px&apos;; clearTimeout(this.t_out); this.start_carousel(); &#125;, turn_page: function(url)&#123; /* 点击图片，触发跳转事件 */ if(!this.click)return; window.open(&quot;//&quot;+url); &#125; &#125;, mounted()&#123; this.start_carousel(); this.width = this.$el.offsetWidth-2; this.height = this.$el.offsetHeight -2 ; &#125;, beforeMount()&#123; /* 将传入对象的各属性赋值给轮播数据 */ if(this.carouselObj)&#123; for(let key in this.carouselObj)&#123; this.$data[key] = this.carouselObj[key]; &#125; &#125; &#125;, watch: &#123; /* 当轮播对象 在切换图片的时候需要有返回函数时返回 */ &apos;index&apos;: function()&#123; this.$emit(&apos;callback&apos;,this.index); &#125; &#125; &#125;&lt;/script&gt; 1.3 css部分123456789101112131415&lt;style scoped&gt; .j_div_carousel&#123;width: 100%;height: 100%;border: 1px solid #ddd;&#125; .j_div_imgs&#123;width:100%;height:100%;position:relative;overflow:hidden;white-space:nowrap;&#125; .j_div_imgs2&#123;width:100%;height:100%;position:relative;overflow:hidden;line-height:0;&#125; .j_div_img_show&#123;width:100%;height:100%;position:absolute;left:0;transition:left 0.5s;&#125; .j_div_radios&#123;position:absolute;bottom:0;left:0;background:#000;opacity:0.5;height:30px;width:100%;text-align:center;line-height:30px;&#125; .j_sp_radio&#123;display:inline-block;width:8px;height:8px;border-radius:50%;background-color:#666;margin-left:5px;cursor:pointer;position:relative;&#125; .j_sp_radio_selected&#123;background-color:#fff;width:9px;height:9px;&#125; .j_div_arrow&#123;position:absolute;top:40%;left:0;width:100%;height:0;&#125; .j_left_arrow&#123;width:25px;height:25px;border-radius:50%;background-color:#000;color:#fff;display:inline-block;text-align:center;opacity:0.3;cursor:pointer;float:left;margin-left:5px;line-height:22px;&#125; .j_right_arrow&#123;width:25px;height:25px;border-radius:50%;background-color:#000;color:#fff;display:inline-block;text-align:center;opacity:0.3;cursor:pointer;float:right;margin-right:5px;line-height:22px;&#125; .j_carousel_img&#123;cursor:pointer;margin:0;&#125; .j_dis_img&#123;position:absolute;top:0;left:0;opacity:0;transition:opacity 1s;&#125;&lt;/style&gt; 2 插件的注册和引用此部分流程大致和评分插件完全一致 在carousel.js完成注册，组件命名随意，我一般命名my+组件名，所以该插件命名my-carousel 使用my-carousel插件之前，先import carousel.js，然后Vue.use()相关插件 页面部分&lt;my-carousel :carouselObj=&quot;carousel&quot; @callback=&quot;select&quot;&gt;&lt;/my-carousel&gt; 具体流程参见评分插件的引用 3 插件的配置3.1 参数配置第二部分第三条：carouselObj传入一个对象，具体包含如下属性 属性名称属性意义默认值是否必须 data传入素材轮播数组，每条记录必须包含src属性，可包含id、name、urlnull是 click点击图片是否支持跳转true否 time图片切换周期（单位秒）3否 animate图片切换动画left否 arrow是否包含左右切换箭头true否 banner图片下方是否展示缩略true否 banner_click缩略圆点是否可点击true否 3.2 回调函数callback回调函数select，当图片切换的时候出发，可以自行定义操作，不需要可以不配置回调函数 4 效果图","categories":[],"tags":[]},{"title":"","slug":"vue score 评分插件","date":"2018-08-13T08:04:33.257Z","updated":"2018-08-13T08:04:33.372Z","comments":true,"path":"2018/08/13/vue score 评分插件/","link":"","permalink":"http://yoursite.com/2018/08/13/vue score 评分插件/","excerpt":"vue score 评分插件标签（空格分隔）： vue javascript 插件 1 插件部分1.1 template部分12345678910111213&lt;template&gt; &lt;div&gt; &lt;div class=&quot;j_div_score&quot;&gt; &lt;div class=&quot;j_div_gray&quot; :style=&quot;&#123;cursor:disable ? &apos;&apos;:&apos;pointer&apos;&#125;&quot;&gt; &lt;span v-for=&quot;i in arr&quot; @click=&quot;setScore(i)&quot; class=&quot;j_score_gray&quot;&gt;&lt;/span&gt; &lt;span class=&quot;j_sp_score&quot; v-if=&quot;gold_width &gt; 0&quot;&gt;&#123;&#123;score&#125;&#125; 分&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_div_gold&quot; :style=&quot;&#123;width:gold_width+&apos;px&apos;&#125;&quot;&gt; &lt;span :style=&quot;&#123;cursor:disable ? &apos;&apos;:&apos;pointer&apos;&#125;&quot; v-for=&quot;a in arr&quot; @click=&quot;setScore(a)&quot; class=&quot;j_score_gold&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;","text":"vue score 评分插件标签（空格分隔）： vue javascript 插件 1 插件部分1.1 template部分12345678910111213&lt;template&gt; &lt;div&gt; &lt;div class=&quot;j_div_score&quot;&gt; &lt;div class=&quot;j_div_gray&quot; :style=&quot;&#123;cursor:disable ? &apos;&apos;:&apos;pointer&apos;&#125;&quot;&gt; &lt;span v-for=&quot;i in arr&quot; @click=&quot;setScore(i)&quot; class=&quot;j_score_gray&quot;&gt;&lt;/span&gt; &lt;span class=&quot;j_sp_score&quot; v-if=&quot;gold_width &gt; 0&quot;&gt;&#123;&#123;score&#125;&#125; 分&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;j_div_gold&quot; :style=&quot;&#123;width:gold_width+&apos;px&apos;&#125;&quot;&gt; &lt;span :style=&quot;&#123;cursor:disable ? &apos;&apos;:&apos;pointer&apos;&#125;&quot; v-for=&quot;a in arr&quot; @click=&quot;setScore(a)&quot; class=&quot;j_score_gold&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 1.2 script 部分12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;script&gt; export default &#123; name: &apos;myscore&apos;, data()&#123; return&#123; total: 5, arr: null, gold_width: 0, zero: false, score: 2, disable: false &#125; &#125;, props:&#123; scoreObj: &#123; type: Object, default: null &#125; &#125;, mounted()&#123; if(this.arr === null)this.arr = []; for(let i = 1; i &lt;= this.total; i++)&#123; this.arr.push(i); &#125; if(this.score &lt; 0)this.score = 0; if(this.score &gt; 10)this.score = 10; this.gold_width = 22 * (this.score/2) + Math.floor(this.score/2)*5; &#125;, methods: &#123; setScore: function(i)&#123; if(this.disable) return; if(this.gold_width == 27 &amp;&amp; i == 1 &amp;&amp; this.zero)&#123; this.gold_width = 0; this.score = 0; &#125; else&#123; this.gold_width = 27*i; this.score = i * 2; &#125; &#125; &#125;, beforeMount()&#123; if(this.scoreObj)&#123; for(let key in this.scoreObj)&#123; this.$data[key] = this.scoreObj[key]; &#125; &#125; &#125;, watch: &#123; &apos;score&apos;: function()&#123; this.$emit(&apos;callback&apos;,this.score); &#125; &#125; &#125;&lt;/script&gt; 1.3 css部分12345678&lt;style scoped&gt; .j_div_score&#123;font-size: 14px;font-family: &apos;微软雅黑&apos;;position:relative;user-select:none;&#125; .j_score_gray&#123;background:url(imgs/gray.png) no-repeat;display: inline-block;width: 22px;height: 20px;margin-right:5px;&#125; .j_score_gold&#123;background:url(imgs/gold.png) no-repeat;display: inline-block;width: 22px;height: 20px;margin-right:5px;&#125; .j_div_gray,.j_div_gold&#123;float:left;position:absolute;top:0;left:0;height:20px;white-space:nowrap;&#125; .j_div_gold&#123;overflow:hidden;transition:width 0.5s;&#125; .j_sp_score&#123;display:inline-block;height:20px;line-height:20px;position:relative;top:-4px;color:#666;margin-left:10px;&#125;&lt;/style&gt; Tips:1、以上通常会被放在一个.vue文件里面2、css部分引入的图片需要根据实际情况引入 2 插件注册以及引用2.1 注册1234567891011import Vue from &apos;vue&apos;import vScore from &apos;./score.vue&apos;const score = &#123; name: &apos;myscore&apos;, install: function()&#123; Vue.component(&apos;my-score&apos;,vScore); &#125;&#125;;export default score; Tips:1、import路径根据实际项目情况而定，下同（不再赘述）2、组件注册名 my-score 可随意起，最好不要与HTML保留标签冲突2.2 引用12import vScore from &apos;../components//vScore/score.js&apos;Vue.use(vScore) 1234567891011121314151617181920212223242526&lt;template&gt; &lt;div&gt; &lt;div class=&quot;div_score&quot;&gt; &lt;my-score :scoreObj=&quot;scoreObj&quot; @callback=&quot;getScore&quot;&gt;&lt;/my-score&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import Vue from &apos;vue&apos; export default&#123; data()&#123; return&#123; scoreObj: &#123; score: 5.7, disable: false, zero: true &#125; &#125; &#125;, methods: &#123; getScore: function(s)&#123; console.log(s); &#125; &#125; &#125;&lt;/script&gt; 3 插件可配置选择3.1 2.2 插件引用部分scoreObj包含三个属性： 属性名称含义默认值是否必须 score初始化评分插件0否 disable是否禁用true否 zero是否可以选择0分true否 Tips：评分一般都是两分一跳，总分10分，考虑实际情况和美观，暂不开放对星星数量和每颗星对应的分值进行配置 3.2 回调函数部分一般评分插件是需要回调一个分数，这样可以在@callback处定义自己的回调方法 4 实际效果","categories":[],"tags":[]}]}